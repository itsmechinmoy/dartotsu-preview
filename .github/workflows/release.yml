name: Build Dartotsu Linux Preview App

permissions:
  contents: write

on:
  schedule:
    - cron: '0 6 * * 2'  # Every Tuesday at 6 AM UTC
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    env:
      CI: true
    outputs:
      SHOULD_RUN: ${{ steps.compare.outputs.SHOULD_RUN }}
      LATEST_SHA: ${{ steps.compare.outputs.LATEST_SHA }}
      LAST_SHA: ${{ steps.compare.outputs.LAST_SHA }}

    steps:
      - name: Checkout Repository
        run: |
          rm -rf * .[^.] .??*
          git clone --branch main https://github.com/aayush2622/Dartotsu.git .

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          repo: 'itsmechinmoy/dartotsu-preview'
          workflow: release.yml
          name: last-sha
          path: .
          allow-forks: true
          if_no_artifact_found: warn
        continue-on-error: true
        env:
          DEBUG_MESSAGE: "No previous last-sha artifact found. This is expected on the first run or if previous runs failed."

      - name: Debug Missing Artifact
        run: |
          if [ ! -f last_sha.txt ]; then
            echo "$DEBUG_MESSAGE"
          fi

      - name: Check for updates
        id: compare
        run: |
          LATEST_SHA=$(git rev-parse HEAD)
          echo "Latest commit SHA: $LATEST_SHA"
          echo "LATEST_SHA=${LATEST_SHA}" >> $GITHUB_OUTPUT

          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            echo "Last saved commit SHA: $LAST_SHA"
            echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_OUTPUT
          else
            LAST_SHA=""
            echo "No previous SHA found."
            echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger detected. Forcing build."
            echo "SHOULD_RUN=true" >> $GITHUB_OUTPUT
          elif [ "$LATEST_SHA" == "$LAST_SHA" ]; then
            echo "No updates found. Canceling the workflow."
            echo "SHOULD_RUN=false" >> $GITHUB_OUTPUT
          else
            echo "Updates found. Continuing workflow."
            echo "SHOULD_RUN=true" >> $GITHUB_OUTPUT
          fi

      - name: Save Current SHA for Next Run
        run: git rev-parse HEAD > last_sha.txt

      - name: Upload Current SHA as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt

  build-linux:
    runs-on: ubuntu-latest
    needs: check-updates
    if: ${{ needs.check-updates.outputs.SHOULD_RUN == 'true' }}
    env:
      CI: true

    steps:
      - name: Checkout Repository
        run: |
          rm -rf * .[^.] .??*
          git clone --branch main https://github.com/aayush2622/Dartotsu.git .

      - name: Get Commits Since Last Run
        run: |
          if [ "${{ needs.check-updates.outputs.LAST_SHA }}" != "" ]; then
            LAST_SHA=${{ needs.check-updates.outputs.LAST_SHA }}
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          REPO_URL="https://github.com/aayush2622/Dartotsu"
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an [֍](${REPO_URL}/commit/%H)" --max-count=10)
          if [ -z "$COMMIT_LOGS" ]; then
            COMMIT_LOGS="● No new commits since last release"
          fi
          echo "REPO_URL=${REPO_URL}" > .env
          COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E "s@#([0-9]+)@[#\1](${REPO_URL}/pull/\1)@g")
          echo -e "Commits:\n" > commit_log.txt
          echo "$COMMIT_LOGS" | sed 's/●/\n●/g' | sed '/^$/d' >> commit_log.txt
          echo "Raw COMMIT_LOGS:"
          cat commit_log.txt
        shell: bash
        env:
          CI: true
        continue-on-error: true

      - name: Extract Version
        id: version
        run: |
          VER=$(grep -E '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
          echo "Version: $VER"
          echo "VER=$VER" >> $GITHUB_OUTPUT
        shell: bash

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.0
          cache: true

      - name: Install System Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev webkit2gtk-4.1 libmpv-dev pkg-config fuse
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Setup .env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET=$SIMKL_SECRET" > .env

      - name: Fetch Flutter Dependencies
        run: flutter pub get

      - name: Build Flutter Linux App
        run: flutter build linux --release

      - name: Create AppImage
        run: |
          rm -rf AppDir
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/dartotsu.png
          cp assets/images/logo.png AppDir/dartotsu.png
          cat <<EOF > AppDir/dartotsu.desktop
          [Desktop Entry]
          Name=Dartotsu
          Exec=usr/bin/dartotsu
          Icon=dartotsu
          Type=Application
          Categories=Utility;
          EOF
          cat <<EOF > AppDir/AppRun
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/dartotsu" "\$@"
          EOF
          chmod +x AppDir/AppRun
          /usr/local/bin/appimagetool AppDir
          mv Dartotsu-x86_64.AppImage build/linux/x64/release/Dartotsu-Linux-v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.AppImage
          ls build/linux/x64/release

      - name: Archive the App Bundle
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Dartotsu_LinuxZip_v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.zip
          directory: build/linux/x64/release/bundle

      - name: Verify Outputs
        run: |
          echo "Listing all files in build/linux/x64/release:"
          ls -la build/linux/x64/release/
          echo "Listing all files in build/linux/x64/release/bundle:"
          ls -la build/linux/x64/release/bundle/
          if [ -f build/linux/x64/release/Dartotsu-Linux-v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.AppImage ]; then
            echo "✅ AppImage found"
            echo "APPIMAGE_EXISTS=true" >> .env
            echo "APPIMAGE_NAME=Dartotsu-Linux-v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.AppImage" >> .env
          else
            echo "❌ AppImage not found!"
            echo "APPIMAGE_EXISTS=false" >> .env
          fi
          if [ -f build/linux/x64/release/bundle/Dartotsu_LinuxZip_v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.zip ]; then
            echo "✅ Zip found"
            echo "ZIP_EXISTS=true" >> .env
            echo "ZIP_NAME=Dartotsu_LinuxZip_v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.zip" >> .env
          else
            echo "❌ Zip not found!"
            echo "ZIP_EXISTS=false" >> .env
          fi
        shell: bash

      - name: Calculate SHA256 Checksums
        if: contains(fromJSON(env.APPIMAGE_EXISTS), 'true') || contains(fromJSON(env.ZIP_EXISTS), 'true')
        run: |
          echo "Calculating SHA256 checksums..."
          if [ "${{ env.APPIMAGE_EXISTS }}" = "true" ]; then
            APPIMAGE_SHA=$(sha256sum "build/linux/x64/release/${{ env.APPIMAGE_NAME }}" | cut -d ' ' -f 1)
            echo "APPIMAGE_SHA=${APPIMAGE_SHA}" >> .env
            echo "AppImage SHA256: ${APPIMAGE_SHA}"
          fi
          if [ "${{ env.ZIP_EXISTS }}" = "true" ]; then
            ZIP_SHA=$(sha256sum "build/linux/x64/release/bundle/${{ env.ZIP_NAME }}" | cut -d ' ' -f 1)
            echo "ZIP_SHA=${ZIP_SHA}" >> .env
            echo "Zip SHA256: ${ZIP_SHA}"
          fi

      - name: Append Checksums to Commit Log
        if: contains(fromJSON(env.APPIMAGE_EXISTS), 'true') || contains(fromJSON(env.ZIP_EXISTS), 'true')
        run: |
          echo -e "\n---\n" >> commit_log.txt
          echo -e "### Checksums\n" >> commit_log.txt
          echo "| Variant | SHA-256 |" >> commit_log.txt
          echo "| ------- | ------- |" >> commit_log.txt
          if [ "${{ env.APPIMAGE_EXISTS }}" = "true" ]; then
            echo "| Linux AppImage | ${{ env.APPIMAGE_SHA }} |" >> commit_log.txt
          fi
          if [ "${{ env.ZIP_EXISTS }}" = "true" ]; then
            echo "| Linux ZIP | ${{ env.ZIP_SHA }} |" >> commit_log.txt
          fi
          echo "Updated commit_log.txt with checksums:"
          cat commit_log.txt
        shell: bash

      - name: Upload Linux Builds as Artifacts
        if: contains(fromJSON(env.APPIMAGE_EXISTS), 'true') || contains(fromJSON(env.ZIP_EXISTS), 'true')
        uses: actions/upload-artifact@v4
        with:
          name: Dartotsu-Linux-Builds
          retention-days: 5
          compression-level: 9
          path: |
            build/linux/x64/release/Dartotsu-Linux-v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.AppImage
            build/linux/x64/release/bundle/Dartotsu_LinuxZip_v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.zip

      - name: Create GitHub Release and Upload Assets
        if: contains(fromJSON(env.APPIMAGE_EXISTS), 'true') || contains(fromJSON(env.ZIP_EXISTS), 'true')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.VER }}-run${{ github.run_number }}
          name: Dartotsu v${{ steps.version.outputs.VER }} (Run ${{ github.run_number }})
          body_path: commit_log.txt
          files: |
            build/linux/x64/release/Dartotsu-Linux-v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.AppImage
            build/linux/x64/release/bundle/Dartotsu_LinuxZip_v${{ steps.version.outputs.VER }}-run${{ github.run_number }}.zip
          draft: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Commit Log as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: commit-log
          path: commit_log.txt
